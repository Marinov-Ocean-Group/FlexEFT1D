install.packages('devtools')
library(devtools)
install_github('rEDM')
install.packages_github('rEDM')
install_github(“ha0ye/rEDM”)
install_github('ha0ye/rEDM')
vignette("mod2user")
install.packages('ggplot2')
install.packages("ggplot2")
library(rEDM)
?simplex
d=13.81
d=1381
pi/6*d**3
d=13.81
pi/6*d**3
exp(-1)
exp(0)
?abline
8.7*0.39
17.8*0.39
a1=.3;a2=.1;b1=10;b2=15
(a1*b1+a2*b2)/(a1+a2)
(a1*b1-a2*b2)/(a1-a2)
b2=5
(a1*b1-a2*b2)/(a1-a2)
a1=300;a2=100
(a1*b1-a2*b2)/(a1-a2)
b2
b1
a2=1
(a1*b1-a2*b2)/(a1-a2)
x=1;r=1;w=.2;r1=2;x1=.8
f=(r*x+w*(r1*x1-r*x))/(x+w*(x1-x))
f
x=1;r=1;w=.2;r1=.8;x1=.8
f=(r*x+w*(r1*x1-r*x))/(x+w*(x1-x))
f
x=1;r=1;w=.2;r1=.8;x1=.5
f=(r*x+w*(r1*x1-r*x))/(x+w*(x1-x))
f
x=.1;r=1;w=.2;r1=.8;x1=.05
f=(r*x+w*(r1*x1-r*x))/(x+w*(x1-x))
f
x=.1;r=1;w=1.2;r1=.8;x1=.05
f=(r*x+w*(r1*x1-r*x))/(x+w*(x1-x))
f
x=.1;r=1;w=1.2;r1=1.4;x1=.05
f=(r*x+w*(r1*x1-r*x))/(x+w*(x1-x))
f
x=.1;r=1;w=1.2;r1=1.4;x1=.15
f=(r*x+w*(r1*x1-r*x))/(x+w*(x1-x))
f
x=.1;r=1;w=1.2;r1=1.4;x1=5
f=(r*x+w*(r1*x1-r*x))/(x+w*(x1-x))
f
x=1;r=1;w=1.2;r1=1.4;x1=.5
f=(r*x+w*(r1*x1-r*x))/(x+w*(x1-x))
f
x=1;r=1;w=1.;r1=1.4;x1=.5
f=(r*x+w*(r1*x1-r*x))/(x+w*(x1-x))
f
x=1;r=1;w=.5;r1=1.4;x1=.5
f=(r*x+w*(r1*x1-r*x))/(x+w*(x1-x))
f
10*1800
10*1800/1000/1.6
log(pi/6*20^3)
.02*exp(8.3*.39)
.02*exp(10*.39)
3.75*30.48
?ode
library(deSolve)
?ode
826*117
x = seq(0,1,0.01)
x=sin(x)
plot(x)
x = seq(0,10,0.01)
y = sin(x)
plot(x,y)
plot(x,y,type='l')
y = sin(x)+2
plot(x,y,type='l')
cv=function(x)sd(x)/mean(x)
cv(y)
y1=sin(x/2)+2
points(x,y1,type='l',lty=2)
y1=sin(x*2)+2
points(x,y1,type='l',lty=2)
cv(y1)
x = seq(0,10,0.01)
y = sin(x)+2
y1 = sin(x/2)+2
cv=function(x)sd(x)/mean(x)
cv(y)
cv(y1)
plot(x,y,type='l')
points(x,y1,type='l',lty=2)
x = seq(0,10,0.01)
y = sin(x)+2
y1 = sin(x*2)+2
cv(y)
cv(y1)
plot(x,y,type='l')
points(x,y1,type='l',lty=2)
f=function(x,k)x**2/(x**2+k**2)
f(0.1,0.25)
f(0.1,0.5)
f(0.1,0.5)*1.5
f(0.05,0.5)
5*500
log(2)
log(3)
-0.3988E-06
5/24/3600
3600*24/10
x=3
class(x)
?as.integer
x=1.1
x=as.integer(x)
x
Nt = as.integer(60*24)
Nt
source('~/Working/NSFC2013/Yihui/NPZ_simulation.R')
source('~/Working/NSFC2013/Yihui/NPZ_simulation.R')
source('~/Working/NSFC2013/Yihui/NPZ_simulation.R')
source('~/Working/NSFC2013/Yihui/NPZ_simulation.R')
pars = c(1,0.5,1,0.5,0.3,0.02)
days = 10
initial = c(1,0.1,0.1)
NPZ(6,pars,days,initial)
source('~/Working/NSFC2013/Yihui/NPZ_simulation.R')
NPZ(6,pars,days,initial)
initials
initial
13902.44/3600
86400/60
?seq_along
seq_along(10)
seq_along(1,3)
seq_along(1)
seq_along(c(1,3))
log(0.01)
5/86400
-0.142225684752222*60
-0.142225684752222*60+0.69
require(ncdf4)
2016 - 28 + 1
1997-1988
2001-1988
source('~/.active-rstudio-document')
NPZ(6,pars,days,initial)
source('~/.active-rstudio-document')
NPZ
NPZ(6,pars,days,initial)
source('~/Working/NSFC2013/Yihui/NPZ_simulation.R')
NPZ(6,pars,days,initial)
source('~/Working/NSFC2013/Yihui/NPZ_simulation.R')
source('~/Working/NSFC2013/Yihui/NPZ_simulation.R')
lines(1:days,results$ZOO,col=3)
lines(1:days,results$PHY,col=2)
plot(1:days,results$PO4,type='l',xlab='Days',ylab='Concentration (µM)')
lines(1:days,results$PHY,col=2)
lines(1:days,results$ZOO,col=3)
plot(1:days,ylim=c(0,2),results$PO4,type='l',xlab='Days',ylab='Concentration (µM)')
legend('topright',txt=c('PO4','PHY','ZOO'),col=1:3)
plot(1:days,ylim=c(0,2),results$PO4,type='l',xlab='Days',ylab='Concentration (µM)')
lines(1:days,results$PHY,col=2)
lines(1:days,results$ZOO,col=3)
legend('topright',txt=c('PO4','PHY','ZOO'),col=1:3)
legend('topright',c('PO4','PHY','ZOO'),col=1:3)
legend('topright',c('PO4','PHY','ZOO'),lty=1,col=1:3)
pars <- c(2,0.2,2,0.2,0.3,0.05)
days <- 80
initial <- c(.1,0.1,1)
results <- NPZ(6,pars,days,initial)$modout
plot(1:days,ylim=c(0,2),results$PO4,type='l',xlab='Days',ylab='Concentration (µM)')
lines(1:days,results$PHY,col=2)
lines(1:days,results$ZOO,col=3)
legend('topright',c('PO4','PHY','ZOO'),lty=1,col=1:3)
?as.real
?.Fortran
doy = 102
mod(doy,12)
Mod(doy,12)
doy%%12
doy%%30
doy%/%30
doy    <- as.integer(doy)
month  <- doy%/%30
month
day    <- doy%%30
day
?nc_open
library(ncdf4)
?nc_open
?ncvar_get
?apply
x <- cbind(x1 = 3, x2 = c(4:1, 2:5))
dimnames(x)[[1]] <- letters[1:8]
apply(x, 2, mean, trim = .2)
x
?array
4**(2/3)
?.Fortran
780*120
?%%
?%/%
?mon
?months
months(.leap.seconds)
months(1:12)
months(30)
.leap.seconds
as.date()
?as.Date
x=1:12
as.Date(x,'%m')
x=as.character(x)
as.Date(x,'%m')
x=1:10
y=matrix(1:10,2,3)
y=matrix(1:10,2,5)
x
y
x*y
?heatmap
?heatmap
require(graphics); require(grDevices)
x  <- as.matrix(mtcars)
x
heatmap(x, Colv = NA, col = cm.colors(256), scale = "column",
RowSideColors = rc, margins = c(5,10),
xlab = "specification variables", ylab =  "Car Models",
main = "heatmap(<Mtcars data>, ..., scale = \"column\")")
rc <- rainbow(nrow(x), start = 0, end = .3)
cc <- rainbow(ncol(x), start = 0, end = .3)
hv <- heatmap(x, col = cm.colors(256), scale = "column",
RowSideColors = rc, ColSideColors = cc, margins = c(5,10),
xlab = "specification variables", ylab =  "Car Models",
main = "heatmap(<Mtcars data>, ..., scale = \"column\")")
round(Ca <- cor(attitude), 2)
heatmap(Ca,               symm = TRUE, margins = c(6,6))
heatmap(Ca,               symm = TRUE, margins = c(6,6),levels=c(0.2,0.4,0.6))
heatmap(Ca,               symm = TRUE, margins = c(6,6),breaks=c(0.2,0.4,0.6))
getAnywhere('heatmap')
?images
?image
x <- 10*(1:nrow(volcano))
y <- 10*(1:ncol(volcano))
image(x, y, volcano, col = terrain.colors(100), axes = FALSE)
contour(x, y, volcano, levels = seq(90, 200, by = 5),
add = TRUE, col = "peru")
7816*.12
24*3600
.5*86400*30
360*86400/60
60%/%60
60%%60
360*86400
1296000-29808000+31104000
360*86400
86400/60
0.04*24
1/17.36
i
pi
log(pi/6.*0.5**3)
log(10)
log(pi/6.*100**3)+log(10)
log(pi/6.*0.6**3)+log(10)
0.1/20
exp(15)
log(pi/6*100^3)
log(pi/6*50^3)
setwd('~/Working/FlexEFT1D')
setwd('~/Working/FlexEFT1D/S1')
Stn <- 'S1'
lon <- 145
lat <- 30
source('~/Working/Global_PP/Interpolate_WOA.R')
Temp_data <- readnc('sst')
Par_data <- readnc('par')
NO3_data <- readnc('no3')
Aks_data <- readnc('Aks')
m_per_s   <- 1/(3600*24*30)
time      <- Aks_data$time*m_per_s
time      <- time%%12
month     <- numeric(12)
Aks       <- Aks_data$data
Aks       <- array(NA,c(dim(Aks)[1],dim(Aks)[2],dim(Aks)[3],12))
for (i in 1:12){
month[i]  <- mean(time[c((3*(i-1)+1):(3*i))])
data      <- Aks_data$data[,,,c((3*(i-1)+1):(3*i))]
Aks[,,,i] <- apply(data,1:3,function(x)mean(x,na.rm=T))
}
Aks[Aks <= 1e-4] <- 1e-4
dim(Aks)
getwd()
save(Temp_data,Par_data,Aks_data,NO3_data,file = 'Input.Rdata')
getdata_station <- function(varname,lon,lat){
#First, get the total dataset
if (varname == 'temp'){
data_s <- Temp_data
} else if (varname == 'par'){
data_s <- Par_data
} else if (varname == 'Aks'){
data_s <- Aks_data
} else if (varname == 'NO3'){
data_s <- NO3_data
} else{
stop('Variable name incorrect!')
}
Lon_s  <- data_s$lon
Lat_s  <- data_s$lat
Lon_s[Lon_s>0] <- Lon_s[Lon_s>0]-360
# Obtain the data:
Z      <- data_s$data
# Determine the time dimension of the data
time       <- data_s$time
lon[lon>0] <- lon[lon>0]-360
gridlist   <- list(x=lon,y=lat)
if(length(dim(Z)) == 3) {
dat  <- data.frame(matrix(NA, nr=1, nc=length(time)+1 ) )
names(dat) <- c('Depth', paste('M',1:12,sep=''))
dat[,1]   <- 0
for (i in 1:length(time) ) {
d    <- list(x=Lon_s, y=Lat_s, z=Z[,,i])
dat[1,i+1] <- interp.surface.grid(d,gridlist)$z
}
} else if (length(dim(Z)) == 4){
depth <- data_s$depth
if (varname == 'Aks'){
N = dim(depth)[3]
dat= numeric(N)
for (k in 1:N){
d      <- list(x=Lon_s, y=Lat_s, z=depth[,,k] )
dat[k] <- interp.surface.grid(d,gridlist)$z
}
depth = abs(dat)
}
dat  <- data.frame(matrix(NA, nr=length(depth), nc=length(time)+1 ) )
names(dat) <- c('Depth', paste('M',1:12,sep=''))
dat[,1]   <- -depth
for (i in 1:length(depth)) {
for (j in 1:length(time) ){
d <- list(x=Lon_s, y=Lat_s, z=Z[,,i,j])
dat[i,j+1] <- interp.surface.grid(d,gridlist)$z
}
}
} else{
stop('Data dimension incorrect!')
}
return(dat)
}
lon
lat
for (var in c('temp','par','Aks','NO3')){
data     <-  getdata_station(var,lon,lat)
if (var == 'NO3'){data = data[,1:2]}
if ((var != 'Aks') && (var != 'par')){
data = data[nrow(data):1,]
}
outfile  <-  paste(Stn,'_',var,'.dat',sep='')
write.table(data,file=outfile,append = F,row.names=FALSE,col.names=TRUE)
}
getwd()
min(Aks,na.rm=T)
var = 'Aks'
data     <-  getdata_station(var,lon,lat)
dim(data)
data
load('Input.Rdata')
data     <-  getdata_station(var,lon,lat)
data
source('~/Working/Global_PP/Interpolate_WOA.R')
#For each depth, get the profile at the targeted coordinates
Temp_data <- readnc('sst')
Par_data <- readnc('par')
NO3_data <- readnc('no3')
Aks_data <- readnc('Aks')
#Average Aks to monthly intervals:
m_per_s   <- 1/(3600*24*30)
time      <- Aks_data$time*m_per_s
time      <- time%%12
month     <- numeric(12)
Aks       <- Aks_data$data
Aks       <- array(NA,c(dim(Aks)[1],dim(Aks)[2],dim(Aks)[3],12))
for (i in 1:12){
month[i]  <- mean(time[c((3*(i-1)+1):(3*i))])
data      <- Aks_data$data[,,,c((3*(i-1)+1):(3*i))]
Aks[,,,i] <- apply(data,1:3,function(x)mean(x,na.rm=T))
}
Aks[1,1,1,]
Aks[1,1,40,]
Aks[100,100,40,]
month
dim(Aks)
min(Aks)
dim(Aks[Aks <= 1e-4])
length(Aks[Aks <= 1e-4])
Aks[Aks <= 1e-4] <- 1e-4
min(Aks)
Aks_data$time  <- month
Aks_data$data  <- Aks
Temp_data$time <- month
NO3_data$time  <- month
save(Temp_data,Par_data,Aks_data,NO3_data,file = 'Input.Rdata')
getwd()
getdata_station <- function(varname,lon,lat){
#First, get the total dataset
if (varname == 'temp'){
data_s <- Temp_data
} else if (varname == 'par'){
data_s <- Par_data
} else if (varname == 'Aks'){
data_s <- Aks_data
} else if (varname == 'NO3'){
data_s <- NO3_data
} else{
stop('Variable name incorrect!')
}
Lon_s  <- data_s$lon
Lat_s  <- data_s$lat
Lon_s[Lon_s>0] <- Lon_s[Lon_s>0]-360
# Obtain the data:
Z      <- data_s$data
# Determine the time dimension of the data
time       <- data_s$time
lon[lon>0] <- lon[lon>0]-360
gridlist   <- list(x=lon,y=lat)
if(length(dim(Z)) == 3) {
dat  <- data.frame(matrix(NA, nr=1, nc=length(time)+1 ) )
names(dat) <- c('Depth', paste('M',1:12,sep=''))
dat[,1]   <- 0
for (i in 1:length(time) ) {
d    <- list(x=Lon_s, y=Lat_s, z=Z[,,i])
dat[1,i+1] <- interp.surface.grid(d,gridlist)$z
}
} else if (length(dim(Z)) == 4){
depth <- data_s$depth
if (varname == 'Aks'){
N = dim(depth)[3]
dat= numeric(N)
for (k in 1:N){
d      <- list(x=Lon_s, y=Lat_s, z=depth[,,k] )
dat[k] <- interp.surface.grid(d,gridlist)$z
}
depth = abs(dat)
}
dat  <- data.frame(matrix(NA, nr=length(depth), nc=length(time)+1 ) )
names(dat) <- c('Depth', paste('M',1:12,sep=''))
dat[,1]   <- -depth
for (i in 1:length(depth)) {
for (j in 1:length(time) ){
d <- list(x=Lon_s, y=Lat_s, z=Z[,,i,j])
dat[i,j+1] <- interp.surface.grid(d,gridlist)$z
}
}
} else{
stop('Data dimension incorrect!')
}
return(dat)
}
var
data     <-  getdata_station(var,lon,lat)
dim(data)
data
for (var in c('temp','par','Aks','NO3')){
data     <-  getdata_station(var,lon,lat)
if (var == 'NO3'){data = data[,1:2]}
if ((var != 'Aks') && (var != 'par')){
data = data[nrow(data):1,]
}
outfile  <-  paste(Stn,'_',var,'.dat',sep='')
write.table(data,file=outfile,append = F,row.names=FALSE,col.names=TRUE)
}
Temp_data <- readnc('sst')
Par_data <- readnc('par')
NO3_data <- readnc('no3')
Aks_data <- readnc('Aks')
#Average Aks to monthly intervals:
m_per_s   <- 1/(3600*24*30)
time      <- Aks_data$time*m_per_s
time      <- time%%12
month     <- numeric(12)
Aks       <- Aks_data$data
Aks       <- array(NA,c(dim(Aks)[1],dim(Aks)[2],dim(Aks)[3],12))
for (i in 1:12){
month[i]  <- mean(time[c((3*(i-1)+1):(3*i))])
data      <- Aks_data$data[,,,c((3*(i-1)+1):(3*i))]
Aks[,,,i] <- apply(data,1:3,function(x)mean(x,na.rm=T))
}
Aks[Aks <= 1e-4] <- 0.0001
Aks_data$time  <- month
Aks_data$data  <- Aks
Temp_data$time <- month
NO3_data$time  <- month
save(Temp_data,Par_data,Aks_data,NO3_data,file = 'Input.Rdata')
#Write into data files:
for (var in c('temp','par','Aks','NO3')){
data     <-  getdata_station(var,lon,lat)
if (var == 'NO3'){data = data[,1:2]}
if ((var != 'Aks') && (var != 'par')){
data = data[nrow(data):1,]
}
outfile  <-  paste(Stn,'_',var,'.dat',sep='')
write.table(data,file=outfile,append = F,row.names=FALSE,col.names=TRUE)
}
data
